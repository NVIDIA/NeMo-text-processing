# Copyright (c) 2024, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import pynini
from pynini.lib import pynutil

from nemo_text_processing.text_normalization.hi.graph_utils import GraphFst, delete_space, insert_space, NEMO_CHAR, NEMO_WHITE_SPACE
from nemo_text_processing.text_normalization.hi.utils import get_abs_path

delete_zero = pynutil.delete(pynini.union("0", "реж"))
delete_zero_optional = pynini.closure(delete_zero, 0, 1)
insert_shunya = pynutil.insert('рд╢реВрдиреНрдп') + insert_space

#Load the number mappings from the TSV file
digit_to_word = pynini.string_file(get_abs_path("data/telephone/number.tsv"))
std_codes = pynini.string_file(get_abs_path("data/telephone/STD_codes.tsv"))
country_codes = pynini.string_file(get_abs_path("data/telephone/country_codes.tsv"))
landline_start_digit = pynini.string_file(get_abs_path("data/telephone/landline_digits.tsv"))
mobile_start_digit = pynini.string_file(get_abs_path("data/telephone/mobile_digits.tsv"))

def load_column_from_tsv(filepath, column_index=1):
    with open(filepath, encoding='utf-8') as tsv:
        return [line.strip().split("\t")[column_index] for line in tsv if line.strip()]
    
def generate_mobile():
    country_code = (
        pynutil.insert("country_code: \"")
        + pynini.cross("+", "рдкреНрд▓рд╕")
        + insert_space + country_codes
        + pynutil.insert("\" ")
        + pynini.closure(delete_space, 0, 1)
    )

    extension_optional = pynini.closure(
        pynutil.insert("extension: \"") 
        + pynini.closure(digit_to_word + insert_space, 1, 3) 
        + pynutil.insert("\" ") 
        + delete_space
        ,0,1
    )

    number_without_country = (
        pynutil.insert("number_part: \"")
        + delete_zero_optional 
        + insert_shunya 
        + mobile_start_digit + insert_space
        + pynini.closure(digit_to_word + insert_space, 9)
        + pynutil.insert("\" ") + delete_space
    )

    number_with_country = (
        country_code
        + pynutil.insert("number_part: \"")
        + mobile_start_digit + insert_space
        + pynini.closure(digit_to_word + insert_space, 9)
        + pynutil.insert("\" ") + delete_space
    ) 
    
    return (number_with_country | number_without_country) + extension_optional
    
def get_landline(std_list, std_length):
    std_digits = pynini.union(*[std for std in std_list if len(std.strip()) == std_length])
    std_graph = delete_zero_optional + insert_shunya + std_digits @ std_codes + insert_space
    
    landline_digits = pynini.closure(digit_to_word + insert_space, 1, 9-std_length) 
    landline_graph = landline_start_digit + insert_space + landline_digits
    
    seperator_optional = pynini.closure(pynini.cross("-", ""), 0, 1)

    return pynutil.insert("number_part: \"") + std_graph + seperator_optional + delete_space + landline_graph + pynutil.insert("\" ")

def generate_landline():
    std_list = load_column_from_tsv(get_abs_path("data/telephone/STD_codes.tsv"),0)
    graph = (
        get_landline(std_list, 2)
        | get_landline(std_list, 3)
        | get_landline(std_list, 4)
        | get_landline(std_list, 5)
        | get_landline(std_list, 6)
        | get_landline(std_list, 7)
    )
    
    return graph

def wrap_context(graph, keywords):
    before, after = get_context(keywords)
    return (before + graph) | (graph + after)

def get_context(keywords: list):
    keywords = pynini.union(*keywords)

    # Define Hindi and English digits
    hindi_digits = pynini.union("реж", "рез", "реи", "рей", "рек", "рел", "рем", "рен", "рео", "реп")
    english_digits = pynini.union("0", "1", "2", "3", "4", "5", "6", "7", "8", "9")
    all_digits = pynini.union(hindi_digits, english_digits)

    # Define word token: sequence of non-digit non-space characters followed by a space
    non_digit_char = pynini.difference(NEMO_CHAR, pynini.union(all_digits, NEMO_WHITE_SPACE))
    word = pynini.closure(non_digit_char, 1) + pynini.accep(" ")

    # Limit to max 5 words
    window = pynini.closure(word, 0, 5)

    before = pynini.closure(
        pynutil.insert('context_before: "')
        + keywords
        + pynini.accep(" ")
        + window
        + pynutil.insert('" '),
        1
    )

    after = pynini.closure(
        pynutil.insert('context_after: "')
        + window
        + keywords
        + pynutil.insert('" '),
        1
    )

    return before.optimize(), after.optimize()

class TelephoneFst(GraphFst):
    """
    Finite state transducer for tagging telephone numbers, e.g.
        9876543210 -> telephone { number_part: "рдиреМ рдЖрда рд╕рд╛рдд рдЫрд╣ рдкрд╛рдБрдЪ рдЪрд╛рд░ рддреАрди рджреЛ рдПрдХ рд╢реВрдиреНрдп" }
        +91 9876543210 -> telephone { country_code: "рдкреНрд▓рд╕ рдиреМ рдПрдХ", number_part: "рдиреМ рдЖрда рд╕рд╛рдд рдЫрд╣ рдкрд╛рдБрдЪ рдЪрд╛рд░ рддреАрди рджреЛ рдПрдХ рд╢реВрдиреНрдп" }
        +91 9876543210 123 -> telephone { country_code: "рдкреНрд▓рд╕ рдиреМ рдПрдХ", number_part: "рдиреМ рдЖрда рд╕рд╛рдд рдЫрд╣ рдкрд╛рдБрдЪ рдЪрд╛рд░ рддреАрди рджреЛ рдПрдХ рд╢реВрдиреНрдп", extension: "рдПрдХ рджреЛ рддреАрди" }
    
    Args:
        deterministic: if True will provide a single transduction option,
            for False multiple transduction are generated (used for audio-based normalization
    """

    def __init__(self):
        super().__init__(name="telephone", kind="classify")

        mobile_number = generate_mobile()
        landline = generate_landline()

        credit_card = (
            pynutil.insert("number_part: \"")
            + pynini.closure(digit_to_word + insert_space, 4)
            + pynutil.insert("\" ") 
            + delete_space
        )
        
        pincode = (
            pynutil.insert("number_part: \"")
            + pynini.closure(digit_to_word + insert_space, 6)
            + pynutil.insert("\" ") 
            + delete_space
        )

        graph = (
            pynutil.add_weight(mobile_number, 0.7)
            | pynutil.add_weight(landline, 0.8)
            | pynutil.add_weight(credit_card, 0.9)
            | pynutil.add_weight(pincode, 1)
        )

        context_mobile_number = wrap_context(mobile_number, ["рдирдВрдмрд░", "рдореЛрдмрд╛рдЗрд▓", "рдлреЛрди", "рдХреЙрдиреНрдЯреИрдХреНрдЯ"])
        context_landline = wrap_context(landline, ["рдирдВрдмрд░", "рдореЛрдмрд╛рдЗрд▓", "рдлреЛрди", "рд▓реИрдВрдбрд▓рд╛рдЗрди", "рдХреЙрдиреНрдЯреИрдХреНрдЯ"])
        context_credit_card = wrap_context(credit_card, ["рдирдВрдмрд░", "рдХрд╛рд░реНрдб", "рдХреНрд░реЗрдбрд┐рдЯ"])
        context_pincode = wrap_context(pincode, ["рдирдВрдмрд░", "рдкрд┐рди", "рдХреЛрдб"])

        context_graph = (
            pynutil.add_weight(context_mobile_number, 0.7)
            | pynutil.add_weight(context_landline, 0.8)
            | pynutil.add_weight(context_credit_card, 0.9)
            | pynutil.add_weight(context_pincode, 1)
        )

        self.final = graph.optimize()
        self.context_final = context_graph.optimize()

        self.fst = self.add_tokens(self.final)
        self.context_fst = self.add_tokens(self.context_final)

if __name__ == '__main__':
    from nemo_text_processing.text_normalization.hi.taggers.telephone import TelephoneFst as TelephoneTagger
    from nemo_text_processing.text_normalization.hi.verbalizers.telephone import TelephoneFst as TelephoneVerbaliser

    def test_graph(graph, text):
        print(f"Input: {text}")
        try:
            lattice = text @ graph
            shortest = pynini.shortestpath(lattice, nshortest=1, unique=True)
            print("тЬЕ Match:", shortest.string())
        except Exception as e:
            print("тЭМ No match found:", str(e))   

    def apply_fst(text, fst):
        try:
            return pynini.shortestpath(text @ fst).string()
        except:
            return

    def run_test(tagger, verbalizer, inputs):
        def print_result(result, status):
            idx, written, tagged_output, expected_spoken, verbalized_output = result
            print(f"\nTest {idx}:")
            print(f"Input:    {written}")
            print(f"Tagged   : {tagged_output}")
            print(f"Expected : {expected_spoken}")
            print(f"Output   : {verbalized_output}")
            if status == 'pass':
                print("тЬЕ Test Passed")
            else:
                print("тЭМ Test Failed")
        
        pass_count, fail_count = 0, 0
            
        for idx, (written, expected_spoken) in enumerate(inputs.items(), start=1):
            tagged_output = apply_fst(written, tagger.fst | tagger.context_fst)
            verbalized_output = apply_fst(tagged_output, verbalizer.fst) 
            result = [idx, written, tagged_output, expected_spoken, verbalized_output]
            if verbalized_output is not None and verbalized_output == expected_spoken:
                pass_count += 1
                print_result(result, 'pass')         
            else:
                fail_count += 1
                print_result(result, 'fail')
                
        print(f"\nЁЯУД Summary: {pass_count} Tests Passed | {fail_count} Tests Failed")

    test_cases = {
        "режрекрелреи-рекреореореорепрепреж": "рд╢реВрдиреНрдп рдЪрд╛рд░ рдкрд╛рдБрдЪ рджреЛ рдЪрд╛рд░ рдЖрда рдЖрда рдЖрда рдиреМ рдиреМ рд╢реВрдиреНрдп",

        "рдирдВрдмрд░ рдерд╛ репрезрелренрезрезрекрежрежрен": "рдирдВрдмрд░ рдерд╛ рд╢реВрдиреНрдп рдиреМ рдПрдХ рдкрд╛рдБрдЪ рд╕рд╛рдд рдПрдХ рдПрдХ рдЪрд╛рд░ рд╢реВрдиреНрдп рд╢реВрдиреНрдп рд╕рд╛рдд",
        "+репрез ренрекрекрежрекрейрезрежреорей рдореЗрд░реЗ рдЗрд╕ рдирдВрдмрд░": "рдкреНрд▓рд╕ рдиреМ рдПрдХ рд╕рд╛рдд рдЪрд╛рд░ рдЪрд╛рд░ рд╢реВрдиреНрдп рдЪрд╛рд░ рддреАрди рдПрдХ рд╢реВрдиреНрдп рдЖрда рддреАрди рдореЗрд░реЗ рдЗрд╕ рдирдВрдмрд░",
        "режрепрезрелренрезрезрекрежрежрен рдореЗрд░реЗ рдЗрд╕ рдирдВрдмрд░": "рд╢реВрдиреНрдп рдиреМ рдПрдХ рдкрд╛рдБрдЪ рд╕рд╛рдд рдПрдХ рдПрдХ рдЪрд╛рд░ рд╢реВрдиреНрдп рд╢реВрдиреНрдп рд╕рд╛рдд рдореЗрд░реЗ рдЗрд╕ рдирдВрдмрд░",
        "рдирдВрдмрд░ режрепрезрелренрезрезрекрежрежрен": "рдирдВрдмрд░ рд╢реВрдиреНрдп рдиреМ рдПрдХ рдкрд╛рдБрдЪ рд╕рд╛рдд рдПрдХ рдПрдХ рдЪрд╛рд░ рд╢реВрдиреНрдп рд╢реВрдиреНрдп рд╕рд╛рдд",
        "рдирдВрдмрд░ рдкреЗ рдХреЙрд▓ рдХрд░реЛ режрекрелреи-рекреореореорепрепреж": "рдирдВрдмрд░ рдкреЗ рдХреЙрд▓ рдХрд░реЛ рд╢реВрдиреНрдп рдЪрд╛рд░ рдкрд╛рдБрдЪ рджреЛ рдЪрд╛рд░ рдЖрда рдЖрда рдЖрда рдиреМ рдиреМ рд╢реВрдиреНрдп",

        "рдкрд┐рди режрезрезрежреирей": "рдкрд┐рди рд╢реВрдиреНрдп рдПрдХ рдПрдХ рд╢реВрдиреНрдп рджреЛ рддреАрди",
        "рдирдВрдмрд░ резреирейрек": "рдирдВрдмрд░ рдПрдХ рджреЛ рддреАрди рдЪрд╛рд░",

        "режрепрезрелренрезрезрекрежрежрен": "рд╢реВрдиреНрдп рдиреМ рдПрдХ рдкрд╛рдБрдЪ рд╕рд╛рдд рдПрдХ рдПрдХ рдЪрд╛рд░ рд╢реВрдиреНрдп рд╢реВрдиреНрдп рд╕рд╛рдд",
        "репрезрелренрезрезрекрежрежрен": "рд╢реВрдиреНрдп рдиреМ рдПрдХ рдкрд╛рдБрдЪ рд╕рд╛рдд рдПрдХ рдПрдХ рдЪрд╛рд░ рд╢реВрдиреНрдп рд╢реВрдиреНрдп рд╕рд╛рдд",
        "+репрез ренрекрекрежрекрейрезрежреорей": "рдкреНрд▓рд╕ рдиреМ рдПрдХ рд╕рд╛рдд рдЪрд╛рд░ рдЪрд╛рд░ рд╢реВрдиреНрдп рдЪрд╛рд░ рддреАрди рдПрдХ рд╢реВрдиреНрдп рдЖрда рддреАрди",
        "режрейреоремреи-рейрелрезренрепрез": "рд╢реВрдиреНрдп рддреАрди рдЖрда рдЫрд╣ рджреЛ рддреАрди рдкрд╛рдБрдЪ рдПрдХ рд╕рд╛рдд рдиреМ рдПрдХ",
        "резрейренрек-рейрежрепрепреорео": "рд╢реВрдиреНрдп рдПрдХ рддреАрди рд╕рд╛рдд рдЪрд╛рд░ рддреАрди рд╢реВрдиреНрдп рдиреМ рдиреМ рдЖрда рдЖрда",
        "режрезремреорепрезрез-рекрелренрей": "рд╢реВрдиреНрдп рдПрдХ рдЫрд╣ рдЖрда рдиреМ рдПрдХ рдПрдХ рдЪрд╛рд░ рдкрд╛рдБрдЪ рд╕рд╛рдд рддреАрди",
        "+репрез репреирезрежрелрезрелремрежрем" :"рдкреНрд▓рд╕ рдиреМ рдПрдХ рдиреМ рджреЛ рдПрдХ рд╢реВрдиреНрдп рдкрд╛рдБрдЪ рдПрдХ рдкрд╛рдБрдЪ рдЫрд╣ рд╢реВрдиреНрдп рдЫрд╣" ,
        "резреирейрек": "рдПрдХ рджреЛ рддреАрди рдЪрд╛рд░",
        "резрезрежрежреирей": "рдПрдХ рдПрдХ рд╢реВрдиреНрдп рд╢реВрдиреНрдп рджреЛ рддреАрди" ,
    }

    # tagger = TelephoneTagger()
    # verbalizer = TelephoneVerbaliser()
    # run_test(tagger, verbalizer, test_cases)

    test_graph(TelephoneFst().context_final, 'рдирдВрдмрд░ рдкреЗ рдХреЙрд▓ рдХрд░реЛ режрекрелреи-рекреореореорепрепреж')